import { Injectable } from '@angular/core';
import { ApiService } from './api.service';
import { HighScoreService } from '../../application/services/high-score.service';

/**
 * Servicio de prueba para verificar la integraci√≥n con la API
 * Este servicio se puede usar para testing manual de la funcionalidad
 */
@Injectable({
  providedIn: 'root'
})
export class ApiTestService {

  constructor(
    private apiService: ApiService,
    private highScoreService: HighScoreService
  ) {}

  /**
   * Prueba la conectividad con la API
   */
  async testApiConnection(): Promise<void> {
    console.log('üîç Probando conexi√≥n con la API...');
    
    try {
      const health = await this.apiService.checkApiHealth().toPromise();
      console.log('‚úÖ API conectada:', health);
      
      // Probar obtenci√≥n de high scores
      const scores = await this.highScoreService.getHighScoresAsync().toPromise();
      console.log('‚úÖ High scores obtenidos:', scores);
      
    } catch (error) {
      console.log('‚ùå Error conectando con API:', error);
      console.log('üì± Usando localStorage como fallback');
      
      // Verificar fallback
      const localScores = this.highScoreService.getHighScores();
      console.log('‚úÖ Scores locales:', localScores);
    }
  }

  /**
   * Prueba el guardado de un score de prueba
   */
  async testScoreSaving(): Promise<void> {
    console.log('üîç Probando guardado de score...');
    
    const testScore = Math.floor(Math.random() * 10000);
    const testPlayer = `TestPlayer_${Date.now()}`;
    
    try {
      const result = await this.highScoreService.addScore(testScore, testPlayer).toPromise();
      console.log('‚úÖ Score guardado:', { score: testScore, player: testPlayer, isHighScore: result });
      
      // Verificar que se guard√≥
      const updatedScores = await this.highScoreService.getHighScoresAsync().toPromise();
      console.log('‚úÖ Scores actualizados:', updatedScores);
      
    } catch (error) {
      console.log('‚ùå Error guardando score:', error);
    }
  }

  /**
   * Prueba completa del sistema
   */
  async runFullTest(): Promise<void> {
    console.log('üöÄ Iniciando prueba completa del sistema API...');
    console.log('================================================');
    
    await this.testApiConnection();
    console.log('------------------------------------------------');
    await this.testScoreSaving();
    
    console.log('================================================');
    console.log('‚úÖ Prueba completa finalizada');
  }

  /**
   * Simula p√©rdida y recuperaci√≥n de conexi√≥n
   */
  testConnectionStates(): void {
    console.log('üîç Probando estados de conexi√≥n...');
    
    // Suscribirse a cambios de estado
    this.apiService.connectionStatus$.subscribe(isConnected => {
      console.log(`üì° Estado de conexi√≥n: ${isConnected ? 'üü¢ CONECTADO' : 'üî¥ DESCONECTADO'}`);
    });

    // Suscribirse a cambios de high scores
    this.highScoreService.highScores$.subscribe(scores => {
      console.log(`üìä High scores actualizados (${scores.length} scores):`, scores);
    });
  }
}

// Funci√≥n global para testing desde la consola del navegador
declare global {
  interface Window {
    testPacmanApi: () => void;
  }
}

// Exponer funci√≥n de prueba globalmente para testing manual
if (typeof window !== 'undefined') {
  window.testPacmanApi = () => {
    console.log('üéÆ Iniciando pruebas de la API de Pacman...');
    // Esta funci√≥n se puede llamar desde la consola del navegador
    // para probar la integraci√≥n manualmente
  };
}
